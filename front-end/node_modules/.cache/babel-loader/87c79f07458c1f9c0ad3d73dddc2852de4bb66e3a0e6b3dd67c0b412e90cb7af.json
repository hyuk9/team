{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport User from \"@/model/user\";\nexport default {\n  data() {\n    return {\n      user: new User(\"\", \"\"),\n      // user 생성자 호출\n      loading: false,\n      // 로그인 버튼 활성화/비활성화 속성\n      message: \"\"\n    };\n  },\n  computed: {\n    // loggedIn 상태 확인\n    loggedIn() {\n      // this.$store.state.모듈명.state값\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\n  created() {\n    if (this.loggedIn) {\n      // 로그인이 되어 있는 상태\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\n    }\n  },\n\n  methods: {\n    // 로그인 버튼 클릭시 실행되는 함수\n    handleLogin() {\n      // 로그인 로직 처리\n      this.loading = true;\n      // vee-validate 함수 처리 방법\n      this.$validator.validateAll().then(isValid => {\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\n        //                             -> isValid = false (유효하지 않음)\n        if (!isValid) {\n          this.loading = false;\n          return; // 함수 탈출(break)\n        }\n\n        // isValid 가 true 이면 아래 로그인 실행(axios 실행)\n        if (this.user.username && this.user.password) {\n          // 공통함수 login 호출 :\n          // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\n          this.$store.dispatch(\"auth/login\", this.user).then(() => {\n            this.$router.push(\"/profile\"); // 로그인 성공하면 강제 /profile 페이지 이동\n          })\n          // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\n          // 로직체크 순서 : true || false, false && true\n          .catch(error => {\n            this.loading = false; // 로그인 버튼 활성화\n            this.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAgHA;AAEA;EACAA;IACA;MACAC;MAAA;MACAC;MAAA;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;IACA;EACA;EACA;EACAC;IACA;MACA;MACA;IACA;EACA;;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACA;QACA;UACA;UACA;QACA;;QAEA;QACA;UACA;UACA;UACA,YACAC,kCACAC;YACA;UACA;UACA;UACA;UAAA,CACAC;YACA;YACA,eACAC,kBACAA,uBACAA,+BACAA,iBACAA;UACA;QACA;MACA;IACA;EACA;AACA","names":["data","user","loading","message","computed","loggedIn","created","methods","handleLogin","dispatch","then","catch","error"],"sourceRoot":"src/components/user","sources":["LoginView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n<!-- 홈페이지 로고 시작 -->\r\n<div class=\"container logo\">\r\n  임시로고\r\n</div>\r\n<!-- 홈페이지 로고 끝 -->\r\n    <!-- 로그인 페이지 시작 -->\r\n    <div class=\"col-md-12 \">\r\n      <div class=\"card card-container\">\r\n        <img\r\n          id=\"profile-img\"\r\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n          class=\"profile-img-card\"\r\n        />\r\n        <form name=\"form\" @submit.prevent=\"handleLogin\">\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">아이디</label>\r\n            <!-- v-validate : vee-validate 라이브러리 제공하는 속성 -->\r\n            <!-- vee-validate : vue 전용 유효성 체크 라이브러리 -->\r\n            <!-- v-validate=\"유효성속성1 | 유효성속성2 | ...\"  -->\r\n            <!--    에러발생시 : errors.has('username') -> true 아래 메세지가 보임 -->\r\n            <input\r\n              v-model=\"user.username\"\r\n              v-validate=\"'required'\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              name=\"username\"\r\n              placeholder=\"아이디를 입력해주세요.\"\r\n            />\r\n            <div\r\n              v-if=\"errors.has('username')\"\r\n              class=\"alert alert-danger\"\r\n              role=\"alert\"\r\n            >\r\n              아이디가 필요합니다.\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">비밀번호</label>\r\n            <input\r\n              v-model=\"user.password\"\r\n              v-validate=\"'required'\"\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              name=\"password\"\r\n              placeholder=\"비밀번호를 입력해주세요\"\r\n            />\r\n            <div\r\n              v-if=\"errors.has('password')\"\r\n              class=\"alert alert-danger\"\r\n              role=\"alert\"\r\n            >\r\n              비밀번호가 필요합니다.\r\n            </div>\r\n          </div>\r\n          <!-- 버튼 시작 -->\r\n          <div class=\"form-group mt-3\">\r\n            <button class=\"btn btn-primary btn-block\" :disabled=\"loading\">\r\n              <span\r\n                v-show=\"loading\"\r\n                class=\"spinner-border spinner-border-sm\"\r\n              ></span>\r\n              <span>Login</span>\r\n            </button>\r\n          </div>\r\n          <!-- 버튼 끝 -->\r\n          <div class=\"form-group\">\r\n            <div v-if=\"message\" class=\"alert alert-danger\" role=\"alert\">\r\n              {{ message }}\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <!-- 로그인 페이지 끝 -->\r\n\r\n       <!-- 푸터 마지막 한줄 -->\r\n        <div class=\"row flex-center pb-3 loginfooter\">\r\n          <div class=\"col-md-6 order-0\">\r\n            <p class=\"text-center text-md-start\">\r\n              All rights Reserved &copy; Your Company, 2021\r\n            </p>\r\n          </div>\r\n          <div class=\"col-md-6 order-1\">\r\n            <p class=\"text-center text-md-end\">\r\n              Made with&nbsp;\r\n              <svg\r\n                class=\"bi bi-suit-heart-fill\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"15\"\r\n                height=\"15\"\r\n                fill=\"#FFB30E\"\r\n                viewBox=\"0 0 16 16\"\r\n              >\r\n                <path\r\n                  d=\"M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1z\"\r\n                ></path></svg\r\n              >&nbsp;by&nbsp;<router-link to = \"\"\r\n                class=\"fw-bold\"\r\n                href=\"https://themewagon.com/\"\r\n                target=\"_blank\"\r\n                >ThemeWagon\r\n              </router-link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <!-- 푸터 마지막 끝 -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport User from \"@/model/user\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: new User(\"\", \"\"), // user 생성자 호출\r\n      loading: false, // 로그인 버튼 활성화/비활성화 속성\r\n      message: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    // loggedIn 상태 확인\r\n    loggedIn() {\r\n      // this.$store.state.모듈명.state값\r\n      return this.$store.state.auth.status.loggedIn;\r\n    },\r\n  },\r\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\r\n  created() {\r\n    if (this.loggedIn) {\r\n      // 로그인이 되어 있는 상태\r\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\r\n    }\r\n  },\r\n  methods: {\r\n    // 로그인 버튼 클릭시 실행되는 함수\r\n    handleLogin() {\r\n      // 로그인 로직 처리\r\n      this.loading = true;\r\n      // vee-validate 함수 처리 방법\r\n      this.$validator.validateAll().then((isValid) => {\r\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\r\n        //                             -> isValid = false (유효하지 않음)\r\n        if (!isValid) {\r\n          this.loading = false;\r\n          return; // 함수 탈출(break)\r\n        }\r\n\r\n        // isValid 가 true 이면 아래 로그인 실행(axios 실행)\r\n        if (this.user.username && this.user.password) {\r\n          // 공통함수 login 호출 :\r\n          // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\r\n          this.$store\r\n            .dispatch(\"auth/login\", this.user)\r\n            .then(() => {\r\n              this.$router.push(\"/profile\"); // 로그인 성공하면 강제 /profile 페이지 이동\r\n            })\r\n            // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\r\n            // 로직체크 순서 : true || false, false && true\r\n            .catch((error) => {\r\n              this.loading = false; // 로그인 버튼 활성화\r\n              this.message =\r\n                (error.response &&\r\n                  error.response.data &&\r\n                  error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n            });\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 350px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n\r\n.logo {\r\n  width: 350px;\r\n  text-align: center;\r\n  margin-top: 100px;\r\n  background-color: aqua;\r\n}\r\n\r\n.loginfooter {\r\n   position: fixed;\r\n    bottom: 0;\r\n    width: 100%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}