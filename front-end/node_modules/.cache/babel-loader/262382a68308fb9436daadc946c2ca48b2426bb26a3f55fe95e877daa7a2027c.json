{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport User from \"@/model/user\";\nexport default {\n  data() {\n    return {\n      // 기본적으로 ROLE_USER로 받고 ROLE 정보를 화면에서 수정할 수 있는 기능을 추가\n      // TODO: user 객체 role 매개변수 추가\n      user: new User(\"\", \"\", \"\", \"ROLE_USER\"),\n      submitted: false,\n      successful: false,\n      message: \"\"\n    };\n  },\n  computed: {\n    // loggedIn 상태 확인\n    loggedIn() {\n      // this.$store.state.모듈명.state값\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\n  created() {\n    if (this.loggedIn) {\n      // 로그인이 되어 있는 상태\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\n    }\n  },\n\n  methods: {\n    // 회원가입 버튼 클릭시 실행되는 함수\n    handleRegister() {\n      this.message = \"\";\n      this.submitted = true; //  회원가입 버튼 클릭 = true\n      // vee-validate 함수 처리 방법\n      this.$validator.validateAll().then(isValid => {\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\n        //                             -> isValid = false (유효하지 않음)\n        if (!isValid) {\n          return; // 함수 탈출(break)\n        }\n\n        // 공통함수 register 호출 :\n        // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\n        this.$store.dispatch(\"auth/register\", this.user).then(response => {\n          this.message = response.message;\n          this.successful = true; // \"회원가입이 성공했습니다.\" 화면 출력\n        })\n        // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\n        // 로직체크 순서 : true || false, false && true\n        .catch(error => {\n          this.successful = false; // 회원가입 실패 -> 회원가입폼 다시 화면에 나옴\n          this.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAwGA;AAEA;EACAA;IACA;MACA;MACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;IACA;EACA;EACA;EACAC;IACA;MACA;MACA;IACA;EACA;;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACA;QACA;UACA;QACA;;QAEA;QACA;QACA,YACAC,qCACAC;UACA;UACA;QACA;QACA;QACA;QAAA,CACAC;UACA;UACA,eACAC,kBACAA,uBACAA,+BACAA,iBACAA;QACA;MACA;IACA;EACA;AACA","names":["data","user","submitted","successful","message","computed","loggedIn","created","methods","handleRegister","dispatch","then","catch","error"],"sourceRoot":"src/components/user","sources":["RegisterView.vue"],"sourcesContent":["<template>\n  <div class=\"col-md-12\">\n    <!-- 최상단 시작 -->\n    <section class=\"py-5 overflow-hidden bg-warning\" id=\"home\">\n      <div class=\"container\">\n        <div class=\"row flex-center\">\n          <div class=\"col-md-5 col-lg-6 order-0 order-md-1 mt-8 mt-md-0\">\n            <!-- <a class=\"img-landing-banner\" href=\"#!\"\n              ><img\n                class=\"img-fluid\"\n                src=\"@/assets/img/species/korean.jpg\"\n                alt=\"hero-header\"\n            /></a> -->\n          </div>\n          <div class=\"col-md-7 col-lg-6 py-8 text-md-start text-center\">\n            <h1 class=\"display-1 fs-md-5 fs-lg-6 fs-xl-8 text-light\">\n              여기는 로그인 <br />\n              페이지 입니다\n            </h1>\n            <h1 class=\"text-800 mb-5 fs-4\">최상단만 제작</h1>\n          </div>\n        </div>\n      </div>\n    </section>\n    <!-- 최상단 끝 -->\n    <div class=\"card card-container\">\n      <img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />\n      <form name=\"form\" @submit.prevent=\"handleRegister\">\n        <div v-if=\"!successful\">\n          <div class=\"form-group\">\n            <label for=\"username\">Username</label>\n            <!-- v-validate : 유효성 체크 -->\n            <!-- v-validate=\"'required|min:3|max:20'\" 체크함 -->\n            <!-- errors.has('username') : 에러 발생했는지 검사 -->\n            <!-- {{errors.first('username')}} : 에러 있으면 화면 출력됨, 없으면 안됨 -->\n            <input\n              v-model=\"user.username\"\n              v-validate=\"'required|min:3|max:20'\"\n              type=\"text\"\n              class=\"form-control\"\n              name=\"username\"\n            />\n            <!-- 유효성 체크 후 에러 체크 : errors.hat(체크대상) -->\n            <!-- errors.first(체크대상) : 에러 내용 출력 -->\n            <div\n              v-if=\"submitted && errors.has('username')\"\n              class=\"alert-danger\"\n            >\n              {{ errors.first(\"username\") }}\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input\n              v-model=\"user.email\"\n              v-validate=\"'required|email|max:50'\"\n              type=\"email\"\n              class=\"form-control\"\n              name=\"email\"\n            />\n            <div v-if=\"submitted && errors.has('email')\" class=\"alert-danger\">\n              {{ errors.first(\"email\") }}\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input\n              v-model=\"user.password\"\n              v-validate=\"'required|min:6|max:40'\"\n              type=\"password\"\n              class=\"form-control\"\n              name=\"password\"\n            />\n            <div\n              v-if=\"submitted && errors.has('password')\"\n              class=\"alert-danger\"\n            >\n              {{ errors.first(\"password\") }}\n            </div>\n          </div>\n          <!-- 회원 가입 버튼 시작 -->\n          <div class=\"form-group mt-3\">\n            <button class=\"btn btn-primary btn-block\">Sign Up</button>\n          </div>\n          <!-- 회원 가입 버튼 끝 -->\n        </div>\n      </form>\n\n      <div\n        v-if=\"message\"\n        class=\"alert\"\n        :class=\"successful ? 'alert-success' : 'alert-danger'\"\n      >\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport User from \"@/model/user\";\n\nexport default {\n  data() {\n    return {\n      // 기본적으로 ROLE_USER로 받고 ROLE 정보를 화면에서 수정할 수 있는 기능을 추가\n      // TODO: user 객체 role 매개변수 추가\n      user: new User(\"\", \"\", \"\", \"ROLE_USER\"),\n      submitted: false,\n      successful: false,\n      message: \"\",\n    };\n  },\n  computed: {\n    // loggedIn 상태 확인\n    loggedIn() {\n      // this.$store.state.모듈명.state값\n      return this.$store.state.auth.status.loggedIn;\n    },\n  },\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\n  created() {\n    if (this.loggedIn) {\n      // 로그인이 되어 있는 상태\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\n    }\n  },\n  methods: {\n    // 회원가입 버튼 클릭시 실행되는 함수\n    handleRegister() {\n      this.message = \"\";\n      this.submitted = true; //  회원가입 버튼 클릭 = true\n      // vee-validate 함수 처리 방법\n      this.$validator.validateAll().then((isValid) => {\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\n        //                             -> isValid = false (유효하지 않음)\n        if (!isValid) {\n          return; // 함수 탈출(break)\n        }\n\n        // 공통함수 register 호출 :\n        // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\n        this.$store\n          .dispatch(\"auth/register\", this.user)\n          .then((response) => {\n            this.message = response.message;\n            this.successful = true; // \"회원가입이 성공했습니다.\" 화면 출력\n          })\n          // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\n          // 로직체크 순서 : true || false, false && true\n          .catch((error) => {\n            this.successful = false; // 회원가입 실패 -> 회원가입폼 다시 화면에 나옴\n            this.message =\n              (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n              error.message ||\n              error.toString();\n          });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n\n.card-container.card {\n  max-width: 350px !important;\n  padding: 40px 40px;\n}\n\n.card {\n  background-color: #f7f7f7;\n  padding: 20px 25px 30px;\n  margin: 0 auto 25px;\n  margin-top: 50px;\n  -moz-border-radius: 2px;\n  -webkit-border-radius: 2px;\n  border-radius: 2px;\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n}\n\n.profile-img-card {\n  width: 96px;\n  height: 96px;\n  margin: 0 auto 10px;\n  display: block;\n  -moz-border-radius: 50%;\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}